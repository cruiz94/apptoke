package arbolitonario;

import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author a10
 */

//class NarioP{
//    Nodo raiz;
//    public Nodo insertarRaiz(String dato)
//    {
//        raiz = new Nodo(dato);
//        return raiz;
//    }
//    
//    public void verHijosRecursivo(Nodo nodo)
//    {
//        
//        //se inicia con los padres
//        for (int i = 0; i < nodo.noHijos; i++) 
//        {
//             nodo.hijos[i].verDato();
////             nodo.hijos[i].otroVer();
//            // se hace lo mismo con los nodos hijos
//            verHijosRecursivo(nodo.hijos[i]);
//        }
//        
//    }
//   
//    
//    public void InsertarRecursivo(Nodo nodo, String dato, String padre)
//    {
//        Nodo nuevo = new Nodo(dato);
//        //si el padre es la raiz
//        if(nodo.getDato().equals(padre))
//        {
//            nodo.aumentarHijo(nuevo);
//        }
//        else
//        {
//            //si el padre es alguno de los hijos
//            for (int i = 0; i < nodo.noHijos; i++) 
//            {
//                if(nodo.hijos[i].getDato().equals(padre))
//                {
//                    //se coloca el hijo en el nodo
//                    nodo.hijos[i].aumentarHijo(nuevo);
//                }
//                else
//                {
//                    InsertarRecursivo(nodo.hijos[i], dato, padre);
//                }                
//            }
//        }
//    }
//}
public class ArbolitoPrueba extends javax.swing.JFrame {

    /**
     * Creates new form ArbolitoPrueba
     */
    
    
    String hijito="";
    String padre ="";
    String tipoFamiliar = "";
    Nodo raiz;
    ArrayList<Familia> familia;
    ArrayList<Bitacora> bitacoras = new ArrayList<Bitacora>();
    
    public ArbolitoPrueba() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTextBitacora = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextFamilia = new javax.swing.JTextArea();
        jBtnCompara = new javax.swing.JButton();
        jTextPregunta = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuAbrir = new javax.swing.JMenuItem();
        jMenuGuardar = new javax.swing.JMenuItem();
        jMenuSaveLOG = new javax.swing.JMenuItem();
        jMenuSalir = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("pruebita");
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTextBitacora.setEditable(false);
        jTextBitacora.setColumns(20);
        jTextBitacora.setRows(5);
        jScrollPane1.setViewportView(jTextBitacora);

        jTextFamilia.setEditable(false);
        jTextFamilia.setColumns(20);
        jTextFamilia.setRows(5);
        jScrollPane2.setViewportView(jTextFamilia);

        jBtnCompara.setBackground(new java.awt.Color(255, 0, 0));
        jBtnCompara.setText("Compara");
        jBtnCompara.setEnabled(false);
        jBtnCompara.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnComparaActionPerformed(evt);
            }
        });

        jTextPregunta.setBackground(new java.awt.Color(255, 0, 0));

        jLabel1.setText("Mi familia:");

        jLabel2.setText("Bitacora:");

        jLabel3.setText("\"Nombre\" es \"familiar de\" \"Nombre\"     || Opciones: hijo de, hermano de, padre de, abuelo de, nieto de, primo de, sobrino de, tio de.");

        jMenu1.setText("File");

        jMenuAbrir.setText("Abrir");
        jMenuAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuAbrirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuAbrir);

        jMenuGuardar.setText("Guardar");
        jMenuGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuGuardar);

        jMenuSaveLOG.setText("Guardar-Log");
        jMenuSaveLOG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSaveLOGActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSaveLOG);

        jMenuSalir.setText("Salir");
        jMenuSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuSalirActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuSalir);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE)
                                .addGap(413, 413, 413))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jScrollPane1)
                                .addGap(8, 8, 8)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 203, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jTextPregunta)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jBtnCompara))
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 288, Short.MAX_VALUE)
                    .addComponent(jScrollPane2))
                .addGap(17, 17, 17)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtnCompara)
                    .addComponent(jTextPregunta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public static String[] separarFrase(String s) {
        int cp = 0; // Cantidad de palabras
         
        // Recorremos en busca de espacios
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ' ') { // Si es un espacio
                cp++; // Aumentamos en uno la cantidad de palabras
            }
        }
         
        // "Este blog es genial" tiene 3 espacios y 3 + 1 palabras
        String[] partes = new String[cp + 1];
        for (int i = 0; i < partes.length; i++) {
            partes[i] = ""; // Se inicializa en "" en lugar de null (defecto)
        }
         
        int ind = 0; // Creamos un índice para las palabras
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == ' ') { // Si hay un espacio
                ind++; // Pasamos a la siguiente palabra
                continue; // Próximo i
            }
            partes[ind] += s.charAt(i); // Sino, agregamos el carácter a la palabra actual
        }
        return partes; // Devolvemos las partes
    }
    
    public Nodo insertarRaiz(String dato)
    {
        raiz = new Nodo(dato);
        return raiz;
    }
    
    public void InsertarRecursivo(Nodo nodo, String dato, String padre)
    {
        Nodo nuevo = new Nodo(dato);
        //si el padre es la raiz
        if(nodo.getDato().equals(padre))
        {
            nodo.aumentarHijo(nuevo);
        }
        else
        {
            //si el padre es alguno de los hijos
            for (int i = 0; i < nodo.noHijos; i++) 
            {
                if(nodo.hijos[i].getDato().equals(padre))
                {
                    //se coloca el hijo en el nodo
                    nodo.hijos[i].aumentarHijo(nuevo);
                }
                else
                {
                    InsertarRecursivo(nodo.hijos[i], dato, padre);
                }                
            }
        }
    }

    public void verHijosRecursivo2(Nodo nodo)
    {
        
        //se inicia con los padres
        for (int i = 0; i < nodo.noHijos; i++) 
        {
             jTextFamilia.append("\n" +  nodo.hijos[i].verDato());
             jTextFamilia.append(System.getProperty("line.separator"));
            // se hace lo mismo con los nodos hijos
            verHijosRecursivo2(nodo.hijos[i]);
            jTextFamilia.append(System.getProperty("line.separator"));
        }
        
    }
    
    public boolean busquedaRecursiva(Nodo nodo,String hijo,String padre)
    {
        if(nodo.getDato().equals(padre)==true)
        {
            
            return true;
        }
        else
        {
            for (int i = 0; i < nodo.noHijos; i++) 
            {
                if(busquedaRecursiva(nodo.hijos[i], hijo, padre))
                {
                    return true;
                }                
            }
            return false;
        }
        
    }
    
    private void jMenuAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuAbrirActionPerformed
        
        familia = new ArrayList<Familia>();
        Nodo nodo = insertarRaiz("Mi familia");
        jTextFamilia.setText(raiz.verDato());
        jTextFamilia.append(System.getProperty("line.separator"));
        InsertarRecursivo(nodo, "Paterna", "Mi familia");
        InsertarRecursivo(nodo, "Materna", "Mi familia");
        
        
        JFileChooser fc=new JFileChooser();
        fc.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.TXT", "txt");
        fc.setFileFilter(filtro);

        int seleccion=fc.showOpenDialog(null);

        if(seleccion==JFileChooser.APPROVE_OPTION){
            File fichero=fc.getSelectedFile();       

            try(FileReader fr=new FileReader(fichero)){
                BufferedReader br = new BufferedReader(fr);
//
                StringTokenizer tokens; 

                String linea;
                while((linea = br.readLine())!= null )
                {

                    tokens = new StringTokenizer(linea, "(,)");
                    while(tokens.hasMoreTokens())
                    {
                    tipoFamiliar= tokens.nextToken();
                    hijito = tokens.nextToken();
                    padre= tokens.nextToken();
                    }
                    switch(tipoFamiliar)
                    {
                        case "hijo de":
                            InsertarRecursivo(nodo, hijito, padre);
                            familia.add(new Familia(hijito, padre));
                            break;
                    }
                    
                    
                }
                verHijosRecursivo2(nodo);
//                verFamilia();
               
                

                fr.close();
                
                

               
                } catch (IOException e1) {
                    e1.printStackTrace();
                }
            } 
                jTextPregunta.setEnabled(true);
                jTextPregunta.setBackground(Color.white);
                jBtnCompara.setEnabled(true);
                jBtnCompara.setBackground(Color.gray);
    }//GEN-LAST:event_jMenuAbrirActionPerformed

    private void jBtnComparaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnComparaActionPerformed
        Calendar fecha = Calendar.getInstance();
        String dia = fecha.getTime().toString();
        String pregunta = jTextPregunta.getText();
        String[] p = separarFrase(pregunta);
        pregunta = p[0] + " " + p[1] + ","+ p[3] + " " + p[4] + "," + p[5] + " " + p[6];
        StringTokenizer tokens; 
        tokens = new StringTokenizer(pregunta, ",");
        if(tokens.countTokens() != 3){
        JOptionPane.showMessageDialog(null, "Error de sintaxis: S1,familiar_de,S2");
        jTextPregunta.setText("");
        }else{
        String s1="";
        String s2="";
        String tipoFam="";
        while(tokens.hasMoreTokens()){
                
                s1 = tokens.nextToken();
                tipoFam= tokens.nextToken();
                s2= tokens.nextToken();

                }
        
        
            switch(tipoFam){

                case "hermano de":
                    if(hermanoDe(s1, s2)==true)
                    {
                       String cadena = "\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si son hermanos";
                       bitacoras.add(new Bitacora(cadena));
                       jTextBitacora.append("\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si son hermanos");
                    }
                    else
                    {
                        String cadena = "\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No son hermanos";
                        bitacoras.add(new Bitacora(cadena));
                        jTextBitacora.append("\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No son hermanos");
                    }
                        break;
                        
                case "hijo de":
                    if(hijoDe(s1, s2)==true)
                    {
                       String cadena = "\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es hijo de " + s2;
                       bitacoras.add(new Bitacora(cadena));
                       jTextBitacora.append("\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es hijo de " + s2);
                    }
                    else
                    {
                        String cadena = "\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su hijo";
                        bitacoras.add(new Bitacora(cadena));
                        jTextBitacora.append("\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su hijo");
                    }
                        break;
                    
                case "padre de":
                    if(padreDe(s1, s2)==true)
                    {
                       String cadena = "\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es padre de " + s2;
                       bitacoras.add(new Bitacora(cadena));
                       jTextBitacora.append("\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es padre de " + s2);
                    }
                    else
                    {
                        String cadena = "\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su padre";
                        bitacoras.add(new Bitacora(cadena));
                        jTextBitacora.append("\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su padre");
                    }
                        break;
                case "abuelo de":
                    if(abueloDe(s1, s2)==true)
                    {
                       String cadena = "\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es abuelo/a de " + s2;
                       bitacoras.add(new Bitacora(cadena));
                       jTextBitacora.append("\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es abuelo/a de " + s2);
                    }
                    else
                    {
                        String cadena = "\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su abuelo/a";
                        bitacoras.add(new Bitacora(cadena));
                        jTextBitacora.append("\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su abuelo/a");
                    }
                        break;
                case "nieto de":
                    if(nietoDe(s1, s2)==true)
                    {
                       String cadena = "\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es nieto/a de " + s2;
                       bitacoras.add(new Bitacora(cadena));
                       jTextBitacora.append("\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es nieto/a de " + s2);
                    }
                    else
                    {
                        String cadena = "\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su nieto/a";
                        bitacoras.add(new Bitacora(cadena));
                        jTextBitacora.append("\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su nieto/a");
                    }
                        break;
                case "tio de":
                    if(tioDe(s1, s2)==true)
                    {
                       String cadena = "\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es tio/a de " + s2;
                       bitacoras.add(new Bitacora(cadena));
                       jTextBitacora.append("\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es tio/a de " + s2);
                    }
                    else
                    {
                        String cadena = "\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su tio/a";
                        bitacoras.add(new Bitacora(cadena));
                        jTextBitacora.append("\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su tio/a");
                    }
                        break;
                case "primo de":
                    if(primoDe(s1, s2)==true)
                    {
                       String cadena = "\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es primo/a de " + s2;
                       bitacoras.add(new Bitacora(cadena));
                       jTextBitacora.append("\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es primo/a de " + s2);
                    }
                    else
                    {
                        String cadena = "\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su primo/a";
                        bitacoras.add(new Bitacora(cadena));
                        jTextBitacora.append("\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su primo/a");
                    }
                        break;
                case "sobrino de":
                    if(sobrinoDe(s1, s2)==true)
                    {
                       String cadena = "\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es sobrino/a de " + s2;
                       bitacoras.add(new Bitacora(cadena));
                       jTextBitacora.append("\n " + dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                               + " R= Si es sobrino/a de " + s2);
                    }
                    else
                    {
                        String cadena = "\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su sobrino/a";
                        bitacoras.add(new Bitacora(cadena));
                        jTextBitacora.append("\n "+ dia +" - "+ s1+ " es " + tipoFam +"/a de "+ s2 +"?" 
                                + " R= No es su sobrino/a");
                    }
                        break;
                default:
                    JOptionPane.showMessageDialog(null, "Error: Introduzca un familiar valido");

                    break;
            }
        jTextPregunta.setText("");
        }
    }//GEN-LAST:event_jBtnComparaActionPerformed

    private void jMenuSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSalirActionPerformed
        cerrar();
    }//GEN-LAST:event_jMenuSalirActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        cerrar();
    }//GEN-LAST:event_formWindowClosing

    private void jMenuSaveLOGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuSaveLOGActionPerformed
        Calendar calendario= Calendar.getInstance();
        String fechita = calendario.getTime().toString();
        String texto = jTextBitacora.getText();
        if (texto.matches("[[ ]*[\n]*[\t]]*")) {
            JOptionPane.showMessageDialog(null,"No hay texto para guardar!", "Oops! Error", JOptionPane.ERROR_MESSAGE);
        }else{
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Guardar bitacora");
            fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("todos los archivos *.txt", "txt"));
            int seleccion = fileChooser.showSaveDialog(null);
            try{
                if (seleccion == JFileChooser.APPROVE_OPTION){
                    File archivo = fileChooser.getSelectedFile();
                    String PATH = archivo.getAbsolutePath();
                    try (FileWriter printwriter = new FileWriter(archivo,true)) {
                        printwriter.write("\nBitacora Dia: " + fechita);
                        printwriter.write(System.getProperty("line.separator"));
                        for (int i = 0; i < bitacoras.size(); i++) {
                            printwriter.write("\n" + bitacoras.get(i).getCadena());
                            printwriter.write(System.getProperty("line.separator"));                        
                        }
                    }
                    jTextBitacora.setText("");
                    
                    if(!(PATH.endsWith(".txt"))){
                        File temp = new File(PATH+".txt");
                        archivo.renameTo(temp);
                    }
                    JOptionPane.showMessageDialog(null,"Guardado exitoso!", "Guardado exitoso!", JOptionPane.INFORMATION_MESSAGE);
                }
            }catch (Exception e){
                JOptionPane.showMessageDialog(null,"Error al guardar el archivo!", "Oops! Error", JOptionPane.ERROR_MESSAGE);
            }
        }  
    }//GEN-LAST:event_jMenuSaveLOGActionPerformed

    private void jMenuGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuGuardarActionPerformed
        String texto = jTextFamilia.getText();
        
        if (texto.matches("[[ ]*[\n]*[\t]]*")) {
            JOptionPane.showMessageDialog(null,"No hay texto para guardar!", "Oops! Error", JOptionPane.ERROR_MESSAGE);
        }else{
            
            JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Guardar Mi familia");
            fileChooser.addChoosableFileFilter(new FileNameExtensionFilter("todos los archivos *.txt", "txt"));
            int seleccion = fileChooser.showSaveDialog(null);
            try{
                if (seleccion == JFileChooser.APPROVE_OPTION){
                    File archivo = fileChooser.getSelectedFile();
                    String PATH = archivo.getAbsolutePath();
                    PrintWriter printwriter = new PrintWriter(archivo);
                    printwriter.append(jTextFamilia.getText());
                    printwriter.close();
                    jTextFamilia.setText("");
                    
                    if(!(PATH.endsWith(".txt"))){
                        File temp = new File(PATH+".txt");
                        archivo.renameTo(temp);
                    }
                    
                    JOptionPane.showMessageDialog(null,"Guardado exitoso!", "Guardado exitoso!", JOptionPane.INFORMATION_MESSAGE);
                }
            }catch (Exception e){
                JOptionPane.showMessageDialog(null,"Error al guardar el archivo!", "Oops! Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jMenuGuardarActionPerformed

    public boolean hermanoDe(String hijito, String hijito2)
    {
        boolean aux = false;
        String auxPadre1 = "";
        String auxPadre2 = "";
        if(hijito.equals(hijito2) == false)
        {
            for (int i = 0; i < familia.size(); i++)
            {
                if(familia.get(i).getHijo().equalsIgnoreCase(hijito)==true)
                {
                    auxPadre1 = familia.get(i).getPadre();
                    for (int j = 0; j < familia.size(); j++) 
                    {
                        if(familia.get(j).getHijo().equalsIgnoreCase(hijito2)==true)
                        {
                            auxPadre2 = familia.get(j).getPadre();
                            if(auxPadre1.equalsIgnoreCase(auxPadre2))
                            {
                                return true;
                            }
                            else
                            {
                                return false;
                            }
                        }                    
                    }
                }                
            }
        }
        return aux;
    }
    
    public boolean hijoDe(String hijito, String padre)
    {
        boolean aux = false;
        for (int i = 0; i < familia.size(); i++) 
        {
            if(familia.get(i).getHijo().equalsIgnoreCase(hijito) 
                    && 
               familia.get(i).getPadre().equalsIgnoreCase(padre)==true)
            {
                return true;
            }            
        }
        
        return aux;
    }
    
    public boolean padreDe(String padre, String hijito)
    {
        boolean aux = false;
        if(hijoDe(hijito,padre)==true)
        {
            return true;
        }
        
        return aux;
    }
    
    public boolean abueloDe(String abuelo, String nieto)
    {
        boolean aux = false;
        String auxPapa = "";
        String auxHijoAbuelo = "";
        for (int i = 0; i < familia.size(); i++) 
        {
            if(familia.get(i).getPadre().equalsIgnoreCase(abuelo)==true)
            {
                auxHijoAbuelo = familia.get(i).getHijo();
                for (int j = 0; j < familia.size(); j++) 
                {
                    if(familia.get(j).getHijo().equalsIgnoreCase(nieto)==true)
                    {
                        auxPapa = familia.get(j).getPadre();
                        if(auxPapa.equalsIgnoreCase(auxHijoAbuelo)==true)
                        {
                            return true;
                        }
                    }                    
                }
            }
            
        }
        
        return aux;
    }
    
    public boolean nietoDe(String nieto,String abuelo)
    {
        boolean aux = false;
        if(abueloDe(abuelo, nieto)==true)
        {
            return true;
        }
        
        return aux;
    }
    
    public boolean tioDe(String hermanoPadre,String hijito)
    {
        boolean aux = false;
        String auxPadre = "";
        
        for (int i = 0; i < familia.size(); i++) 
        {
            if(familia.get(i).getHijo().equalsIgnoreCase(hijito)==true)
            {
                auxPadre = familia.get(i).getPadre();
                if(hermanoDe(hermanoPadre, auxPadre) == true)
                {
                    
                    return true;
                }                               
            }            
        }
        
        return aux;
    }
    
    public boolean primoDe(String hijito,String hijoTio)
    {
        boolean aux = false;
        String auxPadre = "";
        String auxTio = "";
        for (int i = 0; i < familia.size(); i++) 
        {
            if(familia.get(i).getHijo().equalsIgnoreCase(hijito)==true)
            {
                auxPadre = familia.get(i).getPadre();
                for (int j = 0; j < familia.size(); j++) 
                {
                    if(familia.get(j).getHijo().equalsIgnoreCase(hijoTio)==true)
                    {
                        auxTio = familia.get(j).getPadre();
                        if(hermanoDe(auxPadre,auxTio)==true)
                        {
                            return true;
                        }
                        else 
                        {
                            return false;
                        }
                    }
                }
            }
        }
        
        return aux;
    }
    
    public boolean sobrinoDe(String hijito, String hermanoPadre)
    {
        boolean aux = false;
        if(tioDe(hermanoPadre, hijito)==true)
        {
            return true;
        }
        
        return aux;
    }
    
    public void verFamilia()
    {
        //ver padres
        jTextFamilia.append("\n" +  "Padres:");
        for (int i = 0; i < familia.size(); i++) 
        {            
            if(familia.get(i).getHijo().equals("carlos cr")==true)
            {
                jTextFamilia.append("\n" + familia.get(i).getPadre());
            }
        }
        //ver abuelos maternos
        jTextFamilia.append("\n" +  "Abuelos maternos:");
        for (int i = 0; i < familia.size(); i++) 
        {            
            if(familia.get(i).getHijo().equals("yvonne rb")==true)
            {
                jTextFamilia.append("\n" + familia.get(i).getPadre());
            }
        }
        
        //ver abuelos maternos
        jTextFamilia.append("\n" +  "Abuelos paternos:");
        for (int i = 0; i < familia.size(); i++) 
        {            
            if(familia.get(i).getHijo().equals("carlos cgr")==true)
            {
                jTextFamilia.append("\n" + familia.get(i).getPadre());
            }
        }   
    }
    
    public void cerrar()
    {
            Object [] opciones ={"Aceptar","Cancelar"};
            int eleccion = JOptionPane.showOptionDialog(
                    rootPane,"Seguro quiere cerrar la aplicacion?, Asegurese de guardar sus bitacoras"
                    ,"Mensaje de Confirmacion",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,null,opciones,"Aceptar");
            if (eleccion == JOptionPane.YES_OPTION)
            {
            System.exit(0);
            }else{
            }
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ArbolitoPrueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ArbolitoPrueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ArbolitoPrueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ArbolitoPrueba.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ArbolitoPrueba().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnCompara;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuItem jMenuAbrir;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuGuardar;
    private javax.swing.JMenuItem jMenuSalir;
    private javax.swing.JMenuItem jMenuSaveLOG;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextBitacora;
    private javax.swing.JTextArea jTextFamilia;
    private javax.swing.JTextField jTextPregunta;
    // End of variables declaration//GEN-END:variables
}
